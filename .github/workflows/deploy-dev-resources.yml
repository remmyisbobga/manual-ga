# File: .github/workflows/deploy-dev-resources.yml
# This workflow deploys the dev environment resources in GCP using Terraform.
# It uses a matrix strategy to run the same pipeline (validate, plan, deploy)
# for each resource type (e.g., 00resources, 01networking, etc.) located under envs/01dev.

name: "Deploy Dev Resources"

on:
  workflow_dispatch:
    inputs:
      resource_type:
        description: 'Optional: Specific resource type to deploy (00resources, 01networking, 02security, 03databases, 04compute). Leave empty to deploy all.'
        required: false

jobs:
  deploy:
    name: "Deploy Dev Resource ${{ matrix.resource }}"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        resource: ['00resources', '01networking', '02security', '03databases', '04compute']

    concurrency:
      group: "dev-${{ matrix.resource }}"
      cancel-in-progress: false

    if: "${{ github.event.inputs.resource_type == '' || github.event.inputs.resource_type == matrix.resource }}"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Resource Path
        id: vars
        run: echo "resource_path=envs/01dev/${{ matrix.resource }}" >> $GITHUB_OUTPUT

      - name: Display Working Directory
        run: "echo \"Working directory: ${{ steps.vars.outputs.resource_path }}\""

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd "${{ steps.vars.outputs.resource_path }}"
          terraform init

      - name: Terraform Format Check
        run: |
          cd "${{ steps.vars.outputs.resource_path }}"
          terraform fmt -check

      - name: Terraform Validate
        run: |
          cd "${{ steps.vars.outputs.resource_path }}"
          terraform validate

      - name: Terraform Plan
        run: |
          cd "${{ steps.vars.outputs.resource_path }}"
          terraform plan -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "tfplan-${{ matrix.resource }}"
          path: "${{ steps.vars.outputs.resource_path }}/tfplan"

      - name: Terraform Apply
        run: |
          cd "${{ steps.vars.outputs.resource_path }}"
          terraform apply -auto-approve -var-file=env.auto.tfvars
